(in-package :bib)

(defun split-bibfile (bibfile)
  (let* ((str (read-file-string bibfile))
	 (len (strlen str))
	 (list nil))
    (loop for start from 0 below len
	  if (eql (aref str start) #\@)
	    do (let ((end (let ((flag nil)
				(bracket nil))
			    (loop for j from start
				  if (eql (aref str j) #\{)
				    do (setf flag t)
				  if (eql (aref str j) #\{)
				    do (push #\{ bracket)
				  if (eql (aref str j) #\})
				    do (pop bracket)
				  if (and flag (null bracket))
				    return (1+ j)))))
		 (push (substr str start end) list)
		 (setf start end)))
    list))

(defun split-bibitem (item)
  (let* ((start 0)
	 (end (position #\{ item :test #'eql :start start))
	 (class (substr item start end))
	 (start (loop for i from (1+ end)
		      if (not (or (eql (aref item i) #\space)
				  (eql (aref item i) #\tab)))
			return i))
	 (end (position #\, item :test #'eql :start start))
	 (key (substr item start end))
	 (start (loop for i from (1+ end)
		      if (not (eql (aref item i) #\newline))
			return i))
	 (end (1- (strlen item)))
	 (field (substr item start end)))
    (list class key field)))
			       
(defun parse-bibfile (bibfile)
  (mapcar #'split-bibitem (split-bibfile bibfile)))

(defun find-bibitem (key bibitems)
  (find key bibitems :key #'second :test #'equal))
